# Task ID: 4
# Title: 소셜 기능 구현 (팔로우 및 피드)
# Status: done
# Dependencies: 2
# Priority: medium
# Description: 다른 사용자를 팔로우/팔로잉하는 기능과, 팔로우하는 사용자들의 활동(운동 완료, 루틴 생성 등)을 볼 수 있는 피드 페이지를 개발합니다.
# Details:
피드는 최신 활동 순으로 정렬되어야 하며, 사용자가 스크롤을 내리면 이전 데이터를 로드하는 무한 스크롤 기능을 지원해야 합니다.

# Test Strategy:
팔로우/언팔로우 기능 API 및 UI를 테스트합니다. 피드에 올바른 사용자의 활동이 올바른 순서로 표시되는지 확인하고, 무한 스크롤 성능을 검증합니다.

# Subtasks:
## 1. DB schema for follows and activities (feed) via migration [done]
### Dependencies: None
### Description: Add SQLite tables: follows(follower_id, followee_id, created_at, UNIQUE(follower_id, followee_id)) and activities(id, user_id, type, ref_id, created_at). Implement migration 004_social_follows_feed.py and ensure MigrationManager picks it up.
### Details:
- Create migration file in backend/migrations: 004_social_follows_feed.py with upgrade/downgrade
- follows: INTEGER follower_id, INTEGER followee_id, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP; UNIQUE(follower_id, followee_id); indexes on follower_id, followee_id
- activities: INTEGER id PK AUTOINCREMENT, INTEGER user_id, TEXT type, TEXT ref_id, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP; indexes on user_id, created_at
- Verify with a new unittest: create temp DB, run migrations, assert tables/indexes exist
<info added on 2025-08-08T00:23:24.534Z>
Implemented social schema migration and tests. The migration file `backend/migrations/004_social_follows_feed.py` creates the `follows` and `activities` tables with all specified columns, unique constraints, and indexes. A new test, `backend/test_social_migration.py`, was added to verify the schema creation. The `MigrationManager` correctly auto-detects and applies the new migration, and all 16 backend tests pass.
검증: 새 마이그레이션 적용 및 테이블/인덱스 생성 테스트 통과.
</info added on 2025-08-08T00:23:24.534Z>

## 2. Follow/Unfollow API endpoints [done]
### Dependencies: None
### Description: Implement POST /api/social/follow and DELETE /api/social/follow with auth_dependency. Prevent self-follow and duplicates; handle 401/404/409 appropriately.
### Details:
- Endpoints in backend/main.py under /api/social/*
- Use sqlite3 with user_service.DB_PATH
- Validate target user exists
- Return 201 on follow, 204 on unfollow
<info added on 2025-08-08T00:30:47.013Z>
`backend/main.py`에 `POST /api/social/follow` (201 생성, 409 중복) 및 `DELETE /api/social/follow` (204 성공, 404 찾을 수 없음) 엔드포인트를 구현했습니다. 요청 본문은 `FollowRequest{ user_id: int }` 모델을 사용합니다. `backend/test_social_follow.py`에서 셀프 팔로우, 중복, 존재하지 않는 관계 등 주요 시나리오에 대한 테스트를 추가했으며, 모든 백엔드 테스트(18/18)를 통과하여 검증을 완료했습니다.
</info added on 2025-08-08T00:30:47.013Z>

## 3. Feed API with cursor pagination [done]
### Dependencies: None
### Description: Implement GET /api/social/feed?limit=20&cursor=... returning activities for followees ordered by created_at desc with cursor-based pagination.
### Details:
- Query activities joined with follows on followee_id=user_id where follower_id=current user
- Return items and nextCursor (created_at,id tuple)
- Validate limit (max 50) and cursor format
<info added on 2025-08-08T00:31:11.366Z>
`backend/main.py`에 `GET /api/social/feed` 엔드포인트를 구현하여 커서 기반 페이지네이션을 적용한 피드 기능을 완성했습니다. 이 API는 인증된 사용자가 팔로우하는 사람들의 활동을 `created_at DESC, id DESC` 순으로 반환합니다. 커서는 `"{created_at}|{id}"` 형식을 사용하며, `limit` 파라미터는 최대 50으로 제한됩니다. `backend/test_social_feed.py`에 페이지네이션 동작을 검증하는 테스트를 추가했으며, 전체 18개 테스트를 모두 통과했습니다.
</info added on 2025-08-08T00:31:11.366Z>

## 4. Activity recording service (MVP) [done]
### Dependencies: None
### Description: Add a simple service to record generic activities for testing feed: record_activity(user_id, type, ref_id).
### Details:
- New module backend/services/social_service.py
- Function record_activity inserts into activities(user_id, type, ref_id)
- Used by tests to generate feed items
<info added on 2025-08-08T00:31:45.965Z>
Implemented activity recording service (MVP).
- Created `backend/services/social_service.py` with the function `record_activity(user_id, activity_type, ref_id=None)`.
- The function uses the shared `get_db_connection()` to ensure it works correctly with tests that modify the `DB_PATH`.
- Verification: All tests, including related ones, have passed (18/18).
</info added on 2025-08-08T00:31:45.965Z>

## 5. Backend tests for social (follow/feed) [done]
### Dependencies: None
### Description: Add tests covering follow/unfollow, feed pagination, and migration 004.
### Details:
- New tests: backend/test_social_follow.py, backend/test_social_feed.py
- Use temp DB, run migrations, create users, follow relationships, generate activities, assert endpoints responses and pagination

## 6. Frontend service stubs for social APIs [done]
### Dependencies: None
### Description: Add React service methods to call follow/unfollow and feed APIs.
### Details:
- Update frontend/src/services/api.js or new module to include follow/unfollow, feed functions
- No UI yet; just exported functions
<info added on 2025-08-08T00:33:14.712Z>
Implementation Details:
- File Modified: `frontend/src/services/api.js`
- New Functions Added:
  - `followUser(token, userId)`: `POST /api/social/follow` with bearer token.
  - `unfollowUser(token, userId)`: `DELETE /api/social/follow` with body and bearer token.
  - `getFeed(token, {limit, cursor})`: `GET /api/social/feed` with params and bearer token.
- Note: This change only adds API call utilities. It has no UI and minimal impact on the build.
</info added on 2025-08-08T00:33:14.712Z>

