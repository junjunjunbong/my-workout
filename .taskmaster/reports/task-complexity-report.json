{
	"meta": {
		"generatedAt": "2025-08-05T12:45:57.433Z",
		"tasksAnalyzed": 10,
		"totalTasks": 10,
		"analysisCount": 10,
		"thresholdScore": 5,
		"projectName": "Taskmaster",
		"usedResearch": false
	},
	"complexityAnalysis": [
		{
			"taskId": 1,
			"taskTitle": "데이터베이스 시스템 마이그레이션 (RDBMS 전환)",
			"complexityScore": 8,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Task 1, '데이터베이스 시스템 마이그레이션',의 목표는 JSON 파일 저장소를 PostgreSQL로 전환하는 것입니다. 이 작업을 데이터베이스 스키마 설계, ORM 모델 구현, 데이터베이스 연결 설정, 초기 데이터 시딩 스크립트 작성, 그리고 CRUD 오퍼레이션에 대한 단위/통합 테스트 작성의 5가지 주요 하위 작업으로 나누어 주세요. 각 하위 작업은 구체적인 구현 단계를 포함해야 합니다.",
			"reasoning": "애플리케이션의 데이터 저장 방식의 근간을 바꾸는 핵심적인 아키텍처 변경 작업입니다. 장기적인 확장성과 데이터 무결성을 고려한 스키마 설계가 필요하며, 오류 발생 시 전체 시스템에 미치는 영향이 크기 때문에 복잡도가 높습니다."
		},
		{
			"taskId": 2,
			"taskTitle": "사용자 인증 및 프로필 시스템 구축",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Task 2, '사용자 인증 및 프로필 시스템 구축',을 6개의 하위 작업으로 나누어 주세요. 이메일/비밀번호 기반 인증 API 구현, Google 소셜 로그인 연동, Kakao 소셜 로그인 연동, JWT 발급 및 검증 미들웨어 구현, 회원가입/로그인 UI 개발, 그리고 사용자 프로필 관리 페이지(사진, 자기소개, 목표) 개발로 구성해 주세요.",
			"reasoning": "백엔드(API, 보안), 프론트엔드(UI), 외부 서비스(소셜 로그인) 연동 등 여러 영역에 걸친 복합적인 작업입니다. 특히 비밀번호 해싱, JWT 관리 등 보안 관련 구현이 중요하여 신중한 접근이 필요합니다."
		},
		{
			"taskId": 3,
			"taskTitle": "기존 데이터 마이그레이션 스크립트 개발",
			"complexityScore": 6,
			"recommendedSubtasks": 4,
			"expansionPrompt": "Task 3, '기존 데이터 마이그레이션 스크립트 개발',을 4개의 하위 작업으로 나누어 주세요. 1) JSON 파일 파싱 및 데이터 로드, 2) 기존 데이터와 신규 RDBMS 스키마 간의 매핑 로직 구현, 3) 데이터 변환 및 데이터베이스 삽입 로직 개발, 4) 마이그레이션 결과 검증 및 리포팅 스크립트 작성으로 구성해 주세요.",
			"reasoning": "일회성 스크립트이지만 데이터 손실이나 변환 오류가 발생해서는 안 되는 매우 중요한 작업입니다. 기존 데이터의 불일치 가능성 등 예외 상황을 처리하고, 결과를 철저히 검증해야 하는 높은 책임감이 요구되어 복잡도가 중간 이상입니다."
		},
		{
			"taskId": 4,
			"taskTitle": "소셜 기능 구현 (팔로우 및 피드)",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Task 4, '소셜 기능 구현 (팔로우 및 피드)',를 5개의 하위 작업으로 나누어 주세요. 팔로우 관계를 위한 데이터베이스 모델 및 API 구현, 언팔로우 API 구현, 팔로우하는 사용자 활동 기반 피드 생성 API 개발, 사용자 프로필 내 팔로우/언팔로우 버튼 UI 개발, 그리고 무한 스크롤을 지원하는 피드 페이지 UI 개발로 구성해 주세요.",
			"reasoning": "새로운 데이터 모델(팔로우 관계) 설계, 여러 테이블을 조인해야 하는 복잡한 피드 쿼리, 그리고 동적인 프론트엔드(무한 스크롤) 구현이 필요합니다. 백엔드와 프론트엔드 양쪽 모두에서 상당한 개발이 요구됩니다."
		},
		{
			"taskId": 5,
			"taskTitle": "소셜 기능 구현 (좋아요 및 댓글)",
			"complexityScore": 5,
			"recommendedSubtasks": 4,
			"expansionPrompt": "Task 5, '소셜 기능 구현 (좋아요 및 댓글)',을 4개의 하위 작업으로 나누어 주세요. 좋아요/댓글을 위한 데이터베이스 모델 설계, 좋아요/취소 API 엔드포인트 개발, 댓글 CRUD API 엔드포인트 개발, 그리고 피드 항목에 좋아요 버튼 및 댓글 섹션 UI 컴포넌트 구현으로 구성해 주세요.",
			"reasoning": "기존 소셜 기능(Task 4) 위에 추가되는 기능으로, 유사한 개발 패턴을 따릅니다. 하지만 DB 모델링, API, UI 컴포넌트 개발이 여전히 필요하므로 중간 수준의 복잡도를 가집니다."
		},
		{
			"taskId": 6,
			"taskTitle": "고급 분석 대시보드 (PR 트래킹 및 부위별 분석)",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Task 6, '고급 분석 대시보드 (PR 트래킹 및 부위별 분석)',를 6개의 하위 작업으로 나누어 주세요. 1) 기간별 개인 최고 기록(PR) 데이터 집계 API 개발, 2) 기간별 근육 부위 운동량 집계 API 개발, 3) 날짜 범위 선택을 위한 프론트엔드 필터 컴포넌트 구현, 4) Recharts를 사용한 PR 추이 선형 차트 구현, 5) 부위별 운동량 원형 차트 구현, 6) 이들을 통합하는 대시보드 페이지 레이아웃 개발로 구성해 주세요.",
			"reasoning": "단순 데이터 조회가 아닌, 복잡한 집계 및 계산 로직(1RM 추정, 부위별 볼륨 합산 등)이 백엔드에 필요합니다. 프론트엔드에서도 외부 라이브러리를 사용한 데이터 시각화와 인터랙티브 필터 구현이 요구되어 복잡도가 높습니다."
		},
		{
			"taskId": 7,
			"taskTitle": "고급 분석 대시보드 (운동별 상세 분석)",
			"complexityScore": 5,
			"recommendedSubtasks": 4,
			"expansionPrompt": "Task 7, '고급 분석 대시보드 (운동별 상세 분석)',을 4개의 하위 작업으로 나누어 주세요. 특정 운동의 기간별 볼륨 및 중량 데이터 조회 API 개발, 운동 선택 드롭다운 UI 컴포넌트 구현, 선택된 운동의 볼륨 변화 추이 시각화 차트 개발, 그리고 중량 변화 추이 시각화 차트 개발로 구성해 주세요.",
			"reasoning": "기존 분석 대시보드(Task 6)의 구조와 컴포넌트를 재사용하는 확장 기능입니다. 데이터 집계 로직과 차트 구현이 필요하지만, 처음부터 만드는 것이 아니므로 복잡도는 중간 수준입니다."
		},
		{
			"taskId": 8,
			"taskTitle": "AI 코치 기능 고도화",
			"complexityScore": 9,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Task 8, 'AI 코치 기능 고도화',를 6개의 하위 작업으로 나누어 주세요. 1) 사용자 운동 데이터 수집 및 분석을 위한 전처리 모듈 개발, 2) 운동 볼륨, 빈도, 강도 변화를 분석하는 핵심 로직 구현, 3) 분석 결과를 바탕으로 루틴 조정 및 정체기 극복 조언을 생성하는 규칙 기반 엔진 개발, 4) 데이터 부족 시 예외 처리 및 안내 메시지 로직 구현, 5) 생성된 AI 조언을 제공하는 API 엔드포인트 개발, 6) AI 코칭 결과를 사용자에게 보여주는 UI 컴포넌트 개발로 구성해 주세요.",
			"reasoning": "정의된 정답이 없는 추천 로직을 개발해야 합니다. 운동 과학 지식을 코드로 변환하고, 다양한 사용자 데이터 패턴에 대응하는 알고리즘을 설계해야 합니다. 추천의 타당성을 검증하는 과정 또한 복잡하고 어려워 복잡도가 매우 높습니다."
		},
		{
			"taskId": 9,
			"taskTitle": "반응형 웹 디자인 전면 적용",
			"complexityScore": 8,
			"recommendedSubtasks": 8,
			"expansionPrompt": "Task 9, '반응형 웹 디자인 전면 적용',은 애플리케이션 전체에 걸친 작업입니다. 이 작업을 8개의 주요 영역으로 나누어 주세요. 예: 1) 공통 레이아웃 및 네비게이션 반응형 적용, 2) 인증(로그인/회원가입) 페이지 반응형, 3) 메인 대시보드 반응형, 4) 운동 기록 페이지 반응형, 5) 소셜 피드 페이지 반응형, 6) 프로필 페이지 반응형, 7) 고급 분석 페이지 반응형, 8) 전반적인 터치 인터페이스 최적화 및 테스트.",
			"reasoning": "기술적 난이도보다는 작업의 범위가 매우 넓어 복잡도가 높습니다. 애플리케이션의 모든 페이지와 컴포넌트를 검토하고 수정해야 하며, 다양한 기기와 브라우저에서 일관된 사용자 경험을 보장하기 위한 테스트 비용이 많이 듭니다."
		},
		{
			"taskId": 10,
			"taskTitle": "배포 자동화(CI/CD) 및 Docker 컨테이너화",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Task 10, '배포 자동화(CI/CD) 및 Docker 컨테이너화',를 6개의 하위 작업으로 나누어 주세요. 1) FastAPI 백엔드 애플리케이션을 위한 Dockerfile 작성, 2) React 프론트엔드 애플리케이션을 위한 멀티-스테이지 Dockerfile 작성, 3) 로컬 개발 환경을 위한 docker-compose.yml 설정, 4) 코드 푸시 시 테스트와 빌드를 자동화하는 GitHub Actions CI 워크플로우 구축, 5) 배포를 자동화하는 CD 워크플로우 구축, 6) CI/CD 파이프라인을 위한 환경 변수 및 시크릿 관리 전략 수립 및 적용.",
			"reasoning": "인프라 및 DevOps 영역의 전문 지식이 필요합니다. Docker, 웹 서버, CI/CD 도구 등 여러 기술을 조합하여 안정적이고 효율적인 파이프라인을 구축해야 합니다. 설정 오류가 전체 개발 및 배포 프로세스에 영향을 미치므로 복잡도가 높습니다."
		}
	]
}